{"version":3,"sources":["../node_modules/typescript/lib sync","logo.svg","api.js","components/PhotoViewer.js","components/DatePicker.tsx","components/TimePicker.tsx","components/Calendar.tsx","components/ImageWrapper.js","components/PhotoSelector.jsx","App.js","reportWebVitals.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","api","axios","create","baseURL","Title","Typography","Paragraph","Text","Link","PhotoView","props","data","photoData","src","download_url","style","maxWidth","uploader","attribution","department","dt_taken","caption","PhotoViewer","useState","unlocked","setUnlocked","photosToView","setPhotosToView","selectedVolIssue","setSelectedVolIssue","useEffect","console","log","defaultVolume","defaultIssue","volume","issue","API","get","params","then","className","name","onFinish","password","message","error","Item","label","Password","length","photoViews","map","photoInfo","defaultValue","type","htmlType","DatePicker","generatePicker","dayjsGenerateConfig","TimePicker","generateCalendar","React","ref","picker","mode","undefined","displayName","Option","Select","ImageForm","Form","useForm","imgForm","imgDate","dayjs","imgInfo","level","itemNum","file","URL","createObjectURL","form","onFieldsChange","changedFields","allFields","formattedFields","event_name","value","formatImageFormData","handleUpdate","placeholder","isValid","showTime","disabled","TextArea","ImageWrapper","setImgDate","EXIF","getData","exifDate","getTag","this","b","split","Date","parseEXIFDate","date","Dragger","Upload","PhotoSelector","formRemoveMethod","exifShouldRun","setExifShouldRun","fields","getFieldsValue","getFieldInstance","photos","photo","index","photoList","Object","assign","setFieldsValue","updatePhotoDate","values","handlePhotoSubmit","rules","required","List","add","remove","key","field","imgFile","initialValue","accept","multiple","showUploadList","beforeUpload","fileList","addPhotos","PhotoForm","setPhotoList","formData","JSON","stringify","newPhotosList","info","photosToAdd","concat","onSuccess","apiPhotoList","filename","forEach","item","msg_key","loading","content","post","res","FormData","append","url","headers","upload_res","success","App","pageState","setPageState","recentVolIssue","setRecentVolIssue","skip","limit","opacity","onClick","size","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ee9d5a8.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 143;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import axios from \"axios\";\nlet development = process.env.NODE_ENV !== \"production\";\n\nlet api;\n\nif (development) {\n  api = axios.create({\n    baseURL: \"http://localhost:5000/\",\n  });\n} else {\n  api = axios.create({\n    baseURL: \"https://photo-form.thetech.com\",\n  });\n}\n\nexport default api;\n","import {\n  Button,\n  Divider,\n  Input,\n  InputNumber,\n  Space,\n  Typography,\n  Form,\n  message,\n} from \"antd\";\nimport { useEffect, useState } from \"react\";\nimport API from \"../api.js\";\nconst { Title, Paragraph, Text, Link } = Typography;\n\nfunction PhotoView(props) {\n  let data = props.photoData;\n  return (\n    <div>\n      <img src={data.download_url} style={{ maxWidth: \"100%\" }} />\n      <p>\n        Uploader: {data.uploader} <br />\n        Attribution: {data.attribution} <br />\n        Department: {data.department} <br />\n        Date Taken: {data.dt_taken} <br />\n        Caption: {data.caption} <br />\n      </p>\n    </div>\n  );\n}\n\nexport function PhotoViewer(props) {\n  const [unlocked, setUnlocked] = useState([]);\n  const [photosToView, setPhotosToView] = useState([]);\n  const [selectedVolIssue, setSelectedVolIssue] = useState([]);\n\n  useEffect(() => {\n    setUnlocked(false);\n    console.log(\n      `got default volume ${props.defaultVolume} and issue ${props.defaultIssue}`\n    );\n    setSelectedVolIssue({\n      volume: props.defaultVolume,\n      issue: props.defaultIssue,\n    });\n  }, []);\n\n  useEffect(() => {\n    if (unlocked) {\n      API.get(\"photos_by_issue\", {\n        params: {\n          volume: selectedVolIssue.volume,\n          issue: selectedVolIssue.issue,\n        },\n      }).then((data) => setPhotosToView(data));\n    }\n  }, [unlocked, selectedVolIssue]);\n\n  if (!unlocked) {\n    return (\n      <div className=\"main-container\">\n        <Form\n          name=\"viewer-password\"\n          onFinish={(data) => {\n            // this is absolutely atrocious but there is also\n            // nothing sensitive behind this password\n            // just saving AWS bandwidth\n            // but still TODO: have a slightly better auth system\n            if (data.password == \"techphoto\") {\n              setUnlocked(true);\n            } else {\n              message.error(\"Incorrect Password\");\n            }\n          }}\n        >\n          <Form.Item label=\"Password\" name=\"password\">\n            <Input.Password />\n          </Form.Item>\n        </Form>\n      </div>\n    );\n  }\n\n  if (photosToView.data && photosToView.data.length > 0) {\n    var photoViews = photosToView[\"data\"].map((photoInfo) => (\n      <PhotoView photoData={photoInfo} />\n    ));\n  } else {\n    var photoViews = <p>No Photos</p>;\n  }\n\n  return (\n    <div className=\"main-container\">\n      <Typography>\n        <Title>\n          Photos for Volume {selectedVolIssue.volume} Issue{\" \"}\n          {selectedVolIssue.issue}\n        </Title>\n      </Typography>\n      <h1></h1>\n      <Form\n        name=\"select_issue\"\n        onFinish={(data) => {\n          setSelectedVolIssue({\n            volume: data.volume ? data.volume : selectedVolIssue.volume,\n            issue: data.issue ? data.issue : selectedVolIssue.issue,\n          });\n        }}\n      >\n        <h2>Choose new issue</h2>\n        <Space>\n          <Form.Item label=\"Volume\" name=\"volume\">\n            <InputNumber defaultValue={selectedVolIssue.volume} />\n          </Form.Item>\n          <Form.Item label=\"Issue\" name=\"issue\">\n            <InputNumber defaultValue={selectedVolIssue.issue} />\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Go\n            </Button>\n          </Form.Item>\n        </Space>\n      </Form>\n      {photoViews}\n    </div>\n  );\n}\n","// DatePicker for use with day.js and antd\n// as described here https://ant.design/docs/react/replace-moment\n\n\nimport { Dayjs } from \"dayjs\";\nimport dayjsGenerateConfig from \"rc-picker/lib/generate/dayjs\";\nimport generatePicker from \"antd/es/date-picker/generatePicker\";\nimport \"antd/es/date-picker/style/index\";\n\nconst DatePicker = generatePicker<Dayjs>(dayjsGenerateConfig);\n\nexport default DatePicker;\n","// TimePicker for use with day.js and antd\n// as described here https://ant.design/docs/react/replace-moment\n\nimport { Dayjs } from 'dayjs';\nimport * as React from 'react';\nimport DatePicker from './DatePicker';\nimport { PickerTimeProps } from 'antd/es/date-picker/generatePicker';\nimport { Omit } from 'antd/es/_util/type';\n\nexport interface TimePickerProps extends Omit<PickerTimeProps<Dayjs>, 'picker'> {}\n\nconst TimePicker = React.forwardRef<any, TimePickerProps>((props, ref) => {\n  return <DatePicker {...props} picker=\"time\" mode={undefined} ref={ref} />;\n});\n\nTimePicker.displayName = 'TimePicker';\n\nexport default TimePicker;","// Calendar for use with day.js and antd\n// as described here https://ant.design/docs/react/replace-moment\n\nimport { Dayjs } from 'dayjs';\nimport dayjsGenerateConfig from 'rc-picker/lib/generate/dayjs';\nimport generateCalendar from 'antd/es/calendar/generateCalendar';\nimport 'antd/es/calendar/style';\n\nconst Calendar = generateCalendar<Dayjs>(dayjsGenerateConfig);\n\nexport default Calendar;","import React, { useEffect, useState } from \"react\";\nimport EXIF from \"exif-js\"; // for reading image data\nimport * as dayjs from \"dayjs\";\nimport {\n  Typography,\n  Upload,\n  message,\n  Form,\n  Input,\n  InputNumber,\n  Button,\n  Select,\n  Divider,\n  Space,\n} from \"antd\";\nimport { DatePicker } from \"../components\";\nconst { Title, Paragraph, Text, Link } = Typography;\nconst { Option } = Select;\n\n/* ImagePreviewer\n * One of these will be created for each image the user uploads.\n * It will allow the user to set attributes for the image\n *\n * props:\n * itemNum: the number assigned to this image (1,2,3, etc)\n * file: a js File object, the file that we're dealing with now\n * handleUpdate(formData): the function to handle updates to the form data\n * NOT YET: updateRemaining(formData): the function to update the remaining items with entered data\n */\nfunction ImageForm(props) {\n  const [imgForm] = Form.useForm();\n  var imgDate = dayjs(props.imgInfo[\"date\"]);\n\n  function formatImageFormData(allFields) {\n    // the handling of default values doesn't really work right now,\n    // I need to use initialValues instead but couldn't get it to work\n    // TODO: remove the need to check if things are defined here\n    return {\n      event_name: allFields[0].value,\n      department: allFields[1].value ? allFields[1].value : \"fto\",\n      volume: allFields[2].value ? allFields[2].value : props.defaultVolume,\n      issue: allFields[3].value ? allFields[3].value : props.defaultIssue,\n      dt_taken: allFields[4].value ? allFields[4].value : imgDate,\n      caption: allFields[5].value,\n      attribution: allFields[6].value,\n    };\n  }\n\n  console.log(imgDate);\n  console.log(dayjs(\"2019-11-10T03:53:31-05:00\"));\n  return (\n    <div className=\"image-info-form-container\">\n      <Divider />\n      <Title level={2}>\n        Image {props.itemNum}: {props.file.name}\n      </Title>\n      <img src={URL.createObjectURL(props.file)} className=\"image-preview\" />\n      <Form\n        form={imgForm}\n        onFieldsChange={(changedFields, allFields) => {\n          let formattedFields = formatImageFormData(allFields);\n          props.handleUpdate(formattedFields);\n        }}\n      >\n        <Form.Item label=\"Event/Topic\" name=\"event\">\n          <Input placeholder=\"Men's Soccer vs. WPI\" />\n        </Form.Item>\n        <Space>\n          <Form.Item label=\"Department\" name=\"department\">\n            <Select placeholder=\"Select\" defaultValue=\"fto\">\n              <Option value=\"spo\">SPO</Option>\n              <Option value=\"fto\">FTO</Option>\n              <Option value=\"rtz\">RTZ</Option>\n              <Option value=\"cl\">CL</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"Volume\" name=\"volume\">\n            <InputNumber defaultValue={props.defaultVolume} />\n          </Form.Item>\n          <Form.Item label=\"Issue\" name=\"issue\">\n            <InputNumber defaultValue={props.defaultIssue} />\n          </Form.Item>\n        </Space>\n        <Form.Item\n          label=\"Date/Time Taken (autofilled from EXIF if available)\"\n          name=\"datetime\"\n        >\n          <DatePicker\n            defaultValue={imgDate.isValid() ? imgDate : undefined}\n            key={imgDate} // necessary to ensure DatePicker re-renders when date found\n            showTime={true}\n            disabled={imgDate.isValid()}\n          />\n        </Form.Item>\n        <Form.Item label=\"Caption\" name=\"caption\">\n          <Input.TextArea placeholder=\"See the wiki for how to write a good caption\" />\n        </Form.Item>\n        <Form.Item label=\"Attribution (or your full name)\" name=\"attribution\">\n          <Input placeholder=\"Photo Provided by Dance Troupe\" />\n        </Form.Item>\n        {/* <Button\n          type=\"link\"\n          htmlType=\"button\"\n          onClick={() =>\n            alert(\n              `filling others! ${JSON.stringify(imgForm.getFieldsValue(true))}`\n            )\n          }\n        >\n          copy inputs to remaining images\n        </Button> */}\n      </Form>\n    </div>\n  );\n}\n\n/* ImageWrapper\n * Parses the exif data of the image and renders the ImageForm\n */\nexport default function ImageWrapper(props) {\n  const [imgExifData, setExifData] = useState({});\n  const [imgDate, setImgDate] = useState(null);\n\n  function parseEXIFDate(exifDate) {\n    // parses a date in EXIF string format and returns a Date\n    var b = exifDate.split(/\\D/); // split date string on any non-digit char (regex)\n    var d = new Date(b[0], b[1] - 1, b[2], b[3], b[4], b[5]);\n    return d;\n  }\n\n  useEffect(() => {\n    EXIF.getData(props.file, function () {\n      var exifDate = EXIF.getTag(this, \"DateTimeOriginal\");\n\n      if (exifDate !== undefined) setImgDate(parseEXIFDate(exifDate));\n      else setImgDate(null);\n\n      // var exifData = EXIF.getAllTags(this);\n      // if (exifData) {\n      //   setExifData(exifData);\n      //   console.log(`Image Date: ${EXIF.getTag(this, \"DateTimeOriginal\")}`);\n      // } else {\n      //   console.log(\"No EXIF data found in image '\" + props.file.name + \"'.\");\n      // }\n    });\n  }, [props.file]);\n\n  return (\n    <ImageForm\n      {...props}\n      imgInfo={{\n        date: imgDate,\n      }}\n    />\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport EXIF from \"exif-js\"; // for reading image data\nimport * as dayjs from \"dayjs\";\nimport {\n  Typography,\n  Upload,\n  message,\n  Form,\n  Input,\n  Button,\n  Select,\n  Divider,\n  Spin,\n  Space,\n  InputNumber\n} from \"antd\";\n\nimport { DatePicker } from \"../components\";\nimport { isConstructorDeclaration, reduceEachTrailingCommentRange } from \"typescript\";\nconst { Title, Paragraph, Text, Link } = Typography;\nconst { Dragger } = Upload;\nconst { Option } = Select;\n\n/**\n * converts the date from EXIF string format to JS date format\n * @param {String} exifDate \n * @returns {Date}\n */\nfunction parseEXIFDate(exifDate) {\nvar b = exifDate.split(/\\D/); // split date string on any non-digit char (regex)\nvar d = new Date(b[0], b[1] - 1, b[2], b[3], b[4], b[5]);\nreturn d;\n}\n\n/**\n * updates the date for the photo at the given index\n * @param {Date} date \n * @param {BigInt} index \n * @param {FormInstance} form the form to update, from Form.useForm()\n */\nfunction updatePhotoDate(date, index, form) {\n    const fields = form.getFieldsValue();\n    console.log(\"fields are\", fields, \"date is\", date);\n    const {photos} = fields;\n    Object.assign(photos[index], {dt_taken: dayjs(date)});\n    console.log(\"updating date at index\", index, \"fields were\", fields, \"assigning to\", {photos})\n    form.setFieldsValue({photos});\n}\n\nexport function PhotoSelector(props) {\n    const [form] = Form.useForm();\n    var formRemoveMethod;\n    const [exifShouldRun, setExifShouldRun] = useState();\n\n    useEffect(() => {\n        if (!exifShouldRun)\n            return;\n        const fields = form.getFieldsValue();\n        form.getFieldInstance()\n    \n        console.log(\"fields length changed!, fields are\", fields);\n        if (fields[\"photos\"] == undefined)\n            return;\n        const {photos} = fields;\n        photos.map((photo, index) => {\n            if (index > props.photoList.length)\n                return;\n            if (!fields[\"photos\"][index])\n                return;\n            EXIF.getData(props.photoList[index], function () { // TODO: wrap in a promise to serialize. for now, no exif\n                var exifDate = EXIF.getTag(this, \"DateTimeOriginal\");\n                console.log(\"got exif date for image\", exifDate, \"applying to index\", index);\n                if (exifDate !== undefined) updatePhotoDate(parseEXIFDate(exifDate), index, form);\n            });\n        })\n        setExifShouldRun(false);\n    }, [form.getFieldsValue()[\"photos\"] !== undefined ? form.getFieldsValue()[\"photos\"].length : null]);\n\n    return (\n    <div className=\"photo-selector\">\n      <Form\n        name=\"photo-upload-form\"\n        onFinish = {(values) =>\n            props.handlePhotoSubmit(() => {\n                // form.resetFields();\n                values[\"photos\"].map(() => formRemoveMethod(0));\n            }, values )\n        }\n        form={form}\n      >\n        <Form.Item \n            label=\"Your Kerberos\"\n            name=\"uploader\"\n            rules={[{ required: true, message: \"Kerberos is required\"}]}\n        >\n          <Input\n            placeholder=\"kerb\"\n          />\n        </Form.Item>\n        <Form.List name=\"photos\">\n            {(fields, { add, remove }) => {\n                formRemoveMethod = (key) => remove(key);\n                return (\n                <>\n                {fields.map(field => {\n                    var imgFile = props.photoList[field.key];\n                    console.log(\"image for key\", field.key, \"is\", imgFile)\n                    if (imgFile) return (\n                    <div className=\"image-info-form-container\">\n                        <Divider />\n                        <Title level={2}>\n                            Image {field.key + 1}: {imgFile.name}\n                        </Title>\n                        <img src={URL.createObjectURL(imgFile)} className=\"image-preview\" />\n                        <Form.Item \n                            label=\"Event/Topic\"\n                            name={[field.key, 'event_name']}\n                            rules={[{ required: true, message: \"Event name is required\" }]}\n                        >\n                        <Input placeholder=\"Men's Soccer vs. WPI\" />\n                        </Form.Item>\n                        <Space>\n                        <Form.Item \n                            label=\"Department\" \n                            name={[field.key, \"department\"]} \n                            initialValue=\"fto\"\n                            rules={[{ required: true, message:\"Department is required\"}]}\n                        >\n                            <Select placeholder=\"Select\">\n                            <Option value=\"spo\">SPO</Option>\n                            <Option value=\"fto\">FTO</Option>\n                            <Option value=\"rtz\">RTZ</Option>\n                            <Option value=\"cl\">CL</Option>\n                            </Select>\n                        </Form.Item>\n                        <Form.Item\n                            label=\"Volume\" \n                            name={[field.key, \"volume\"]} \n                            rules={[{ required: true, message: \"Volume # is required\" }]}\n                            initialValue={props.defaultVolume}\n                        >\n                            <InputNumber/>\n                        </Form.Item>\n                        <Form.Item\n                            label=\"Issue\"\n                            name={[field.key, \"issue\"]}\n                            rules={[{ required: true, message: \"Issue # is required\" }]}\n                            initialValue={props.defaultIssue}\n                        >\n                            <InputNumber/>\n                        </Form.Item>\n                        </Space>\n                        <Form.Item\n                            label=\"Date/Time Taken (autofilled from EXIF if available)\"\n                            name={[field.key, \"dt_taken\"]}\n                            // initialValue={imgDate.isValid() ? imgDate : undefined}\n                            rules={[{ required: true, message: \"Date/Time is required\" }]}\n                        >\n                        <DatePicker\n                            // key={imgDate} // necessary to ensure DatePicker re-renders when date found\n                            showTime={true}\n                            // disabled={imgDate.isValid()}\n                        />\n                        </Form.Item>\n                        <Form.Item \n                            label=\"Caption\"\n                            name={[field.key, \"caption\"]}\n                            rules={[{ required: true, message: \"Caption is required\" }]} \n                        >\n                        <Input.TextArea placeholder=\"See the wiki for how to write a good caption\" />\n                        </Form.Item>\n                        <Form.Item\n                            label=\"Attribution (or your full name)\"\n                            name={[field.key, \"attribution\"]}\n                            rules={[{ required: true, message: \"Attribution is required\" }]}\n                        >\n                        <Input placeholder=\"Photo Provided by Dance Troupe\" />\n                        </Form.Item>\n                    </div>\n                    )\n                    else return (\n                        <div className=\"image-info-form-container\">\n                            <Divider />\n                            <Spin />\n                            <Divider />\n                        </div>\n                    )\n                })}\n\n                <Form.Item>\n                \n                <Divider />\n                <Dragger\n                    name=\"file\"\n                    accept=\"image/png, image/jpeg\"\n                    multiple={true}\n                    showUploadList={false}\n                    beforeUpload={(file, fileList) => {\n                        // we add the photo info to a global list,\n                        // and create fields to correspond in the form.\n                        // the indices will align. This is a bit messy,\n                        // but I cannot think of a better way.\n                        props.addPhotos(fileList); // TODO: I don't think this really needs to be in the parent\n                        add();\n                        setExifShouldRun(true);\n                        console.log(\"beforeUpload called for file\", file, \"fields are now\", fields);\n                        return false;\n                    }}\n                >\n                    Click or drag to upload files. Please upload JPEG files.\n                </Dragger>\n                </Form.Item>\n                </>\n                )}\n            }\n        </Form.List>\n        <Button type=\"submit\" htmlType=\"submit\">\n            {`Submit ${props.photoList.length} Photo${props.photoList.length != 1 ? \"s\" : \"\"}`}\n        </Button>\n      </Form>\n    </div>\n  );\n}","import logo from \"./logo.svg\";\nimport API from \"./api\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  Typography,\n  Upload,\n  message,\n  Form,\n  Input,\n  Button,\n  Select,\n  Divider,\n  Spin,\n} from \"antd\";\nimport { PhotoViewer } from \"./components/PhotoViewer.js\";\nimport { PhotoSelector } from \"./components/PhotoSelector\"\nimport \"./App.scss\";\n\nimport { ImageWrapper } from \"./components\";\n\nconst { Title, Paragraph, Text, Link } = Typography;\nconst { Dragger } = Upload;\n\nfunction App() {\n  const [pageState, setPageState] = useState([]);\n\n  useEffect(() => {\n    setPageState(\"form\");\n  }, []);\n\n  const [recentVolIssue, setRecentVolIssue] = useState([]);\n\n  useEffect(() => {\n    // get the volume and issue of the last photo uploaded\n    API.get(\"photos\", {\n      params: {\n        skip: 0,\n        limit: 1,\n      },\n    }).then((res) => {\n      if (res.data.length == 0) {\n        setRecentVolIssue({\n          volume: undefined,\n          issue: undefined,\n        });\n        return;\n      }\n\n      console.log(res);\n      setRecentVolIssue({\n        volume: res.data[0].volume,\n        issue: res.data[0].issue,\n      });\n      console.log(\"got most recent volume and issue\");\n      console.log(res.data[0].volume);\n      console.log(res.data[0].issue);\n    });\n  }, []);\n\n  if (pageState == \"form\") {\n    return (\n      <div className=\"main-container\">\n        <PhotoForm\n          defaultVolume={recentVolIssue.volume}\n          defaultIssue={recentVolIssue.issue}\n        />\n        <br />\n        <a\n          style={{\n            opacity: \"25%\",\n          }}\n          onClick={() => {\n            setPageState(\"view\");\n            console.log(\"clicked\");\n            console.log(pageState);\n          }}\n        >\n          view all photos\n        </a>\n      </div>\n    );\n  }\n\n  if (pageState == \"view\") {\n    return (\n      <div className=\"main-container\">\n        <PhotoViewer\n          defaultVolume={recentVolIssue.volume}\n          defaultIssue={recentVolIssue.issue}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"main-container\">\n      <Spin size=\"large\" />\n    </div>\n  );\n}\n\nfunction PhotoForm(props) {\n  // start our list of photos empty - this is a FileList\n  const [photoList, setPhotoList] = useState([]); // we'll update as new photos are added\n  const [uploaderKerb, setUploaderKerb] = useState([]);\n\n  function handlePhotoSubmit(onSuccess, values) {\n    console.log(\"submitted photo list to follow\", photoList);\n    console.log(\"and values\", values);\n    console.log(\"function to call on success\", onSuccess);\n\n    let apiPhotoList = photoList.map((photo, index) => ({\n      ...values[\"photos\"][index],\n      uploader: values[\"uploader\"],\n      filename: photo.name,\n    }));\n    console.log(apiPhotoList);\n\n    apiPhotoList.forEach((item, index) => {\n      const msg_key = \"uploading_msg\";\n      message.loading({\n        content: `Uploading Photo ${index + 1}/${photoList.length}`,\n        msg_key,\n      });\n      API.post(\"create_photo\", item).then((res) => {\n        console.log(\"post result\");\n        console.log(res);\n\n        let formData = new FormData();\n        for (var key in res.data[\"upload_url\"].fields) {\n          formData.append(key, res.data[\"upload_url\"].fields[key]);\n        }\n        formData.append(\"file\", photoList[index][\"file\"]);\n\n        API.post(res.data[\"upload_url\"].url, formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\",\n          },\n        }).then((upload_res) => {\n          console.log(\"upload result\");\n          console.log(upload_res);\n          message.success({ content: `Done uploading ${index + 1}/${photoList.length}!`, msg_key });\n        });\n      \n      console.log(\"calling function to clear fields\");\n      onSuccess();\n      setPhotoList([]);\n\n        //   {\n        //   method: \"post\",\n        //   url: res.data[\"upload_url\"].url,\n        //   data: formData,\n        // });\n      });\n    });\n    // API.post(\"photos\").then((res) => {\n    //   console.log(\"all photos:\");\n    //   console.log(res);\n    // });\n  }\n\n  let imageForms = photoList.map((photoInfo, index) => (\n    <ImageWrapper\n      file={photoInfo.file}\n      key={index}\n      itemNum={index + 1}\n      defaultVolume={props.defaultVolume}\n      defaultIssue={props.defaultIssue}\n      handleUpdate={(formData) => {\n        console.log(\n          `Saw update to form in item ${index + 1}: ${JSON.stringify(formData)}`\n        );\n        // this is updating the photoList state\n        let newPhotosList = [...photoList];\n        newPhotosList[index].info = formData;\n        setPhotoList(newPhotosList);\n      }}\n    />\n  ));\n\n  return (\n    <div className=\"photo-form\">\n      <Typography>\n        <Title>The Tech Photo Upload Form</Title>\n        <Paragraph>\n          This site is meant to make the process of uploading photos simpler.\n        </Paragraph>\n      </Typography>\n      <PhotoSelector\n        addPhotos={(photosToAdd) => {\n          console.log(\"adding photos. photoList is\", photoList);\n          setPhotoList(photoList.concat(photosToAdd));\n          console.log(\"added\", photosToAdd, \"photo list is now\", photoList);\n        }}\n        defaultVolume={props.defaultVolume}\n        defaultIssue={props.defaultIssue}\n        photoList={photoList}\n        handlePhotoSubmit={handlePhotoSubmit}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}