{"version":3,"sources":["logo.svg","api.js","components/PhotoViewer.js","components/DatePicker.tsx","components/TimePicker.tsx","components/Calendar.tsx","components/ImageWrapper.js","App.js","reportWebVitals.js","index.js"],"names":["axios","create","baseURL","Title","Typography","Paragraph","Text","Link","PhotoView","props","data","photoData","src","download_url","style","maxWidth","uploader","attribution","department","dt_taken","caption","PhotoViewer","useState","unlocked","setUnlocked","photosToView","setPhotosToView","selectedVolIssue","setSelectedVolIssue","useEffect","console","log","defaultVolume","defaultIssue","volume","issue","API","get","params","then","className","name","onFinish","password","message","error","Item","label","Password","length","photoViews","map","photoInfo","defaultValue","type","htmlType","DatePicker","generatePicker","dayjsGenerateConfig","TimePicker","generateCalendar","React","ref","picker","mode","undefined","displayName","Option","Select","ImageForm","Form","useForm","imgForm","imgDate","dayjs","imgInfo","level","itemNum","file","URL","createObjectURL","form","onFieldsChange","changedFields","allFields","formattedFields","event_name","value","formatImageFormData","handleUpdate","placeholder","isValid","showTime","disabled","TextArea","ImageWrapper","setImgDate","EXIF","getData","exifDate","getTag","this","b","split","Date","parseEXIFDate","date","Dragger","Upload","PhotoForm","photoList","setPhotoList","uploaderKerb","setUploaderKerb","imageForms","index","formData","JSON","stringify","newPhotosList","info","PhotoSelector","addPhotos","photosToAdd","photoInfoList","concat","handleKerbChange","onClick","apiPhotoList","filename","forEach","item","msg_key","loading","content","post","res","FormData","key","fields","append","url","headers","upload_res","success","rules","required","onChange","target","accept","multiple","showUploadList","beforeUpload","fileList","App","pageState","setPageState","recentVolIssue","setRecentVolIssue","skip","limit","opacity","size","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ec42412.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"http://localhost:5000/\",\n});\n","import {\n  Button,\n  Divider,\n  Input,\n  InputNumber,\n  Space,\n  Typography,\n  Form,\n  message,\n} from \"antd\";\nimport { useEffect, useState } from \"react\";\nimport API from \"../api.js\";\nconst { Title, Paragraph, Text, Link } = Typography;\n\nfunction PhotoView(props) {\n  let data = props.photoData;\n  return (\n    <div>\n      <img src={data.download_url} style={{ maxWidth: \"100%\" }} />\n      <p>\n        Uploader: {data.uploader} <br />\n        Attribution: {data.attribution} <br />\n        Department: {data.department} <br />\n        Date Taken: {data.dt_taken} <br />\n        Caption: {data.caption} <br />\n      </p>\n    </div>\n  );\n}\n\nexport function PhotoViewer(props) {\n  const [unlocked, setUnlocked] = useState([]);\n  const [photosToView, setPhotosToView] = useState([]);\n  const [selectedVolIssue, setSelectedVolIssue] = useState([]);\n\n  useEffect(() => {\n    setUnlocked(false);\n    console.log(\n      `got default volume ${props.defaultVolume} and issue ${props.defaultIssue}`\n    );\n    setSelectedVolIssue({\n      volume: props.defaultVolume,\n      issue: props.defaultIssue,\n    });\n  }, []);\n\n  useEffect(() => {\n    if (unlocked) {\n      API.get(\"photos_by_issue\", {\n        params: {\n          volume: selectedVolIssue.volume,\n          issue: selectedVolIssue.issue,\n        },\n      }).then((data) => setPhotosToView(data));\n    }\n  }, [unlocked, selectedVolIssue]);\n\n  if (!unlocked) {\n    return (\n      <div className=\"main-container\">\n        <Form\n          name=\"viewer-password\"\n          onFinish={(data) => {\n            // this is absolutely atrocious but there is also\n            // nothing sensitive behind this password\n            // just saving AWS bandwidth\n            // but still TODO: have a slightly better auth system\n            if (data.password == \"techphoto\") {\n              setUnlocked(true);\n            } else {\n              message.error(\"Incorrect Password\");\n            }\n          }}\n        >\n          <Form.Item label=\"Password\" name=\"password\">\n            <Input.Password />\n          </Form.Item>\n        </Form>\n      </div>\n    );\n  }\n\n  if (photosToView.data && photosToView.data.length > 0) {\n    var photoViews = photosToView[\"data\"].map((photoInfo) => (\n      <PhotoView photoData={photoInfo} />\n    ));\n  } else {\n    var photoViews = <p>No Photos</p>;\n  }\n\n  return (\n    <div className=\"main-container\">\n      <Typography>\n        <Title>\n          Photos for Volume {selectedVolIssue.volume} Issue{\" \"}\n          {selectedVolIssue.issue}\n        </Title>\n      </Typography>\n      <h1></h1>\n      <Form\n        name=\"select_issue\"\n        onFinish={(data) => {\n          setSelectedVolIssue({\n            volume: data.volume ? data.volume : selectedVolIssue.volume,\n            issue: data.issue ? data.issue : selectedVolIssue.issue,\n          });\n        }}\n      >\n        <h2>Choose new issue</h2>\n        <Space>\n          <Form.Item label=\"Volume\" name=\"volume\">\n            <InputNumber defaultValue={selectedVolIssue.volume} />\n          </Form.Item>\n          <Form.Item label=\"Issue\" name=\"issue\">\n            <InputNumber defaultValue={selectedVolIssue.issue} />\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Go\n            </Button>\n          </Form.Item>\n        </Space>\n      </Form>\n      {photoViews}\n    </div>\n  );\n}\n","// DatePicker for use with day.js and antd\n// as described here https://ant.design/docs/react/replace-moment\n\n\nimport { Dayjs } from \"dayjs\";\nimport dayjsGenerateConfig from \"rc-picker/lib/generate/dayjs\";\nimport generatePicker from \"antd/es/date-picker/generatePicker\";\nimport \"antd/es/date-picker/style/index\";\n\nconst DatePicker = generatePicker<Dayjs>(dayjsGenerateConfig);\n\nexport default DatePicker;\n","// TimePicker for use with day.js and antd\n// as described here https://ant.design/docs/react/replace-moment\n\nimport { Dayjs } from 'dayjs';\nimport * as React from 'react';\nimport DatePicker from './DatePicker';\nimport { PickerTimeProps } from 'antd/es/date-picker/generatePicker';\nimport { Omit } from 'antd/es/_util/type';\n\nexport interface TimePickerProps extends Omit<PickerTimeProps<Dayjs>, 'picker'> {}\n\nconst TimePicker = React.forwardRef<any, TimePickerProps>((props, ref) => {\n  return <DatePicker {...props} picker=\"time\" mode={undefined} ref={ref} />;\n});\n\nTimePicker.displayName = 'TimePicker';\n\nexport default TimePicker;","// Calendar for use with day.js and antd\n// as described here https://ant.design/docs/react/replace-moment\n\nimport { Dayjs } from 'dayjs';\nimport dayjsGenerateConfig from 'rc-picker/lib/generate/dayjs';\nimport generateCalendar from 'antd/es/calendar/generateCalendar';\nimport 'antd/es/calendar/style';\n\nconst Calendar = generateCalendar<Dayjs>(dayjsGenerateConfig);\n\nexport default Calendar;","import React, { useEffect, useState } from \"react\";\nimport EXIF from \"exif-js\"; // for reading image data\nimport * as dayjs from \"dayjs\";\nimport {\n  Typography,\n  Upload,\n  message,\n  Form,\n  Input,\n  InputNumber,\n  Button,\n  Select,\n  Divider,\n  Space,\n} from \"antd\";\nimport { DatePicker } from \"../components\";\nconst { Title, Paragraph, Text, Link } = Typography;\nconst { Option } = Select;\n\n/* ImagePreviewer\n * One of these will be created for each image the user uploads.\n * It will allow the user to set attributes for the image\n *\n * props:\n * itemNum: the number assigned to this image (1,2,3, etc)\n * file: a js File object, the file that we're dealing with now\n * handleUpdate(formData): the function to handle updates to the form data\n * NOT YET: updateRemaining(formData): the function to update the remaining items with entered data\n */\nfunction ImageForm(props) {\n  const [imgForm] = Form.useForm();\n  var imgDate = dayjs(props.imgInfo[\"date\"]);\n\n  function formatImageFormData(allFields) {\n    // the handling of default values doesn't really work right now,\n    // I need to use initialValues instead but couldn't get it to work\n    // TODO: remove the need to check if things are defined here\n    return {\n      event_name: allFields[0].value,\n      department: allFields[1].value ? allFields[1].value : \"fto\",\n      volume: allFields[2].value ? allFields[2].value : props.defaultVolume,\n      issue: allFields[3].value ? allFields[3].value : props.defaultIssue,\n      dt_taken: allFields[4].value ? allFields[4].value : imgDate,\n      caption: allFields[5].value,\n      attribution: allFields[6].value,\n    };\n  }\n\n  console.log(imgDate);\n  console.log(dayjs(\"2019-11-10T03:53:31-05:00\"));\n  return (\n    <div className=\"image-info-form-container\">\n      <Divider />\n      <Title level={2}>\n        Image {props.itemNum}: {props.file.name}\n      </Title>\n      <img src={URL.createObjectURL(props.file)} className=\"image-preview\" />\n      <Form\n        form={imgForm}\n        onFieldsChange={(changedFields, allFields) => {\n          let formattedFields = formatImageFormData(allFields);\n          props.handleUpdate(formattedFields);\n        }}\n      >\n        <Form.Item label=\"Event/Topic\" name=\"event\">\n          <Input placeholder=\"Men's Soccer vs. WPI\" />\n        </Form.Item>\n        <Space>\n          <Form.Item label=\"Department\" name=\"department\">\n            <Select placeholder=\"Select\" defaultValue=\"fto\">\n              <Option value=\"spo\">SPO</Option>\n              <Option value=\"fto\">FTO</Option>\n              <Option value=\"rtz\">RTZ</Option>\n              <Option value=\"cl\">CL</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"Volume\" name=\"volume\">\n            <InputNumber defaultValue={props.defaultVolume} />\n          </Form.Item>\n          <Form.Item label=\"Issue\" name=\"issue\">\n            <InputNumber defaultValue={props.defaultIssue} />\n          </Form.Item>\n        </Space>\n        <Form.Item\n          label=\"Date/Time Taken (autofilled from EXIF if available)\"\n          name=\"datetime\"\n        >\n          <DatePicker\n            defaultValue={imgDate.isValid() ? imgDate : undefined}\n            key={imgDate} // necessary to ensure DatePicker re-renders when date found\n            showTime={true}\n            disabled={imgDate.isValid()}\n          />\n        </Form.Item>\n        <Form.Item label=\"Caption\" name=\"caption\">\n          <Input.TextArea placeholder=\"See the wiki for how to write a good caption\" />\n        </Form.Item>\n        <Form.Item label=\"Attribution (or your full name)\" name=\"attribution\">\n          <Input placeholder=\"Photo Provided by Dance Troupe\" />\n        </Form.Item>\n        {/* <Button\n          type=\"link\"\n          htmlType=\"button\"\n          onClick={() =>\n            alert(\n              `filling others! ${JSON.stringify(imgForm.getFieldsValue(true))}`\n            )\n          }\n        >\n          copy inputs to remaining images\n        </Button> */}\n      </Form>\n    </div>\n  );\n}\n\n/* ImageWrapper\n * Parses the exif data of the image and renders the ImageForm\n */\nexport default function ImageWrapper(props) {\n  const [imgExifData, setExifData] = useState({});\n  const [imgDate, setImgDate] = useState(null);\n\n  function parseEXIFDate(exifDate) {\n    // parses a date in EXIF string format and returns a Date\n    var b = exifDate.split(/\\D/); // split date string on any non-digit char (regex)\n    var d = new Date(b[0], b[1] - 1, b[2], b[3], b[4], b[5]);\n    return d;\n  }\n\n  useEffect(() => {\n    EXIF.getData(props.file, function () {\n      var exifDate = EXIF.getTag(this, \"DateTimeOriginal\");\n\n      if (exifDate !== undefined) setImgDate(parseEXIFDate(exifDate));\n      else setImgDate(null);\n\n      // var exifData = EXIF.getAllTags(this);\n      // if (exifData) {\n      //   setExifData(exifData);\n      //   console.log(`Image Date: ${EXIF.getTag(this, \"DateTimeOriginal\")}`);\n      // } else {\n      //   console.log(\"No EXIF data found in image '\" + props.file.name + \"'.\");\n      // }\n    });\n  }, [props.file]);\n\n  return (\n    <ImageForm\n      {...props}\n      imgInfo={{\n        date: imgDate,\n      }}\n    />\n  );\n}\n","import logo from \"./logo.svg\";\nimport API from \"./api\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  Typography,\n  Upload,\n  message,\n  Form,\n  Input,\n  Button,\n  Select,\n  Divider,\n  Spin,\n} from \"antd\";\nimport { PhotoViewer } from \"./components/PhotoViewer.js\";\nimport \"./App.scss\";\n\nimport { ImageWrapper } from \"./components\";\n\nconst { Title, Paragraph, Text, Link } = Typography;\nconst { Dragger } = Upload;\n\nfunction App() {\n  const [pageState, setPageState] = useState([]);\n\n  useEffect(() => {\n    setPageState(\"form\");\n  }, []);\n\n  const [recentVolIssue, setRecentVolIssue] = useState([]);\n\n  useEffect(() => {\n    // get the volume and issue of the last photo uploaded\n    API.get(\"photos\", {\n      params: {\n        skip: 0,\n        limit: 1,\n      },\n    }).then((res) => {\n      if (res.data.length == 0) {\n        setRecentVolIssue({\n          volume: undefined,\n          issue: undefined,\n        });\n        return;\n      }\n\n      console.log(res);\n      setRecentVolIssue({\n        volume: res.data[0].volume,\n        issue: res.data[0].issue,\n      });\n      console.log(\"got most recent volume and issue\");\n      console.log(res.data[0].volume);\n      console.log(res.data[0].issue);\n    });\n  }, []);\n\n  if (pageState == \"form\") {\n    return (\n      <div className=\"main-container\">\n        <PhotoForm\n          defaultVolume={recentVolIssue.volume}\n          defaultIssue={recentVolIssue.issue}\n        />\n        <br />\n        <a\n          style={{\n            opacity: \"25%\",\n          }}\n          onClick={() => {\n            setPageState(\"view\");\n            console.log(\"clicked\");\n            console.log(pageState);\n          }}\n        >\n          view all photos\n        </a>\n      </div>\n    );\n  }\n\n  if (pageState == \"view\") {\n    return (\n      <div className=\"main-container\">\n        <PhotoViewer\n          defaultVolume={recentVolIssue.volume}\n          defaultIssue={recentVolIssue.issue}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"main-container\">\n      <Spin size=\"large\" />\n    </div>\n  );\n}\n\nfunction PhotoForm(props) {\n  // start our list of photos empty - this is a FileList\n  const [photoList, setPhotoList] = useState([]); // we'll update as new photos are added\n  const [uploaderKerb, setUploaderKerb] = useState([]);\n\n  function handlePhotoSubmit() {\n    console.log(\"submitted photo list to follow\");\n    console.log(photoList);\n\n    let apiPhotoList = photoList.map((photoInfo, index) => ({\n      ...photoInfo[\"info\"],\n      uploader: uploaderKerb,\n      filename: photoInfo[\"file\"].name,\n    }));\n    console.log(apiPhotoList);\n\n    apiPhotoList.forEach((item, index) => {\n      const msg_key = \"uploading_msg\";\n      message.loading({\n        content: `Uploading Photo ${index + 1}/${photoList.length}`,\n        msg_key,\n      });\n      API.post(\"create_photo\", item).then((res) => {\n        console.log(\"post result\");\n        console.log(res);\n\n        let formData = new FormData();\n        for (var key in res.data[\"upload_url\"].fields) {\n          formData.append(key, res.data[\"upload_url\"].fields[key]);\n        }\n        formData.append(\"file\", photoList[index][\"file\"]);\n\n        API.post(res.data[\"upload_url\"].url, formData, {\n          headers: {\n            \"Content-Type\": \"multipart/form-data\",\n          },\n        }).then((upload_res) => {\n          console.log(\"upload result\");\n          console.log(upload_res);\n          message.success({ content: \"Done uploading!\", msg_key });\n        });\n\n        setPhotoList([]);\n\n        //   {\n        //   method: \"post\",\n        //   url: res.data[\"upload_url\"].url,\n        //   data: formData,\n        // });\n      });\n    });\n    // API.post(\"photos\").then((res) => {\n    //   console.log(\"all photos:\");\n    //   console.log(res);\n    // });\n  }\n\n  let imageForms = photoList.map((photoInfo, index) => (\n    <ImageWrapper\n      file={photoInfo.file}\n      key={index}\n      itemNum={index + 1}\n      defaultVolume={props.defaultVolume}\n      defaultIssue={props.defaultIssue}\n      handleUpdate={(formData) => {\n        console.log(\n          `Saw update to form in item ${index + 1}: ${JSON.stringify(formData)}`\n        );\n        // this is updating the photoList state\n        let newPhotosList = [...photoList];\n        newPhotosList[index].info = formData;\n        setPhotoList(newPhotosList);\n      }}\n    />\n  ));\n\n  return (\n    <div className=\"photo-form\">\n      <Typography>\n        <Title>The Tech Photo Upload Form</Title>\n        <Paragraph>\n          This site is meant to make the process of uploading photos simpler.\n        </Paragraph>\n      </Typography>\n      <PhotoSelector\n        addPhotos={(photosToAdd) => {\n          // add an object with info and the file object for each photo\n          let photoInfoList = photosToAdd.map((file) => ({\n            file: file,\n            info: {},\n          }));\n          setPhotoList(photoList.concat(photoInfoList));\n        }}\n        handleKerbChange={(uploaderKerb) => {\n          setUploaderKerb(uploaderKerb);\n        }}\n      />\n\n      {/* show image forms for each image */}\n      {imageForms}\n      <Divider />\n      {/* maybe it would be better to have one button for each one?\n          then we don't have to parse this grossness */}\n      <Button type=\"primary\" onClick={handlePhotoSubmit}>\n        {`Submit ${photoList.length} Photo${photoList.length != 1 ? \"s\" : \"\"}`}\n      </Button>\n    </div>\n  );\n}\n\nfunction PhotoSelector(props) {\n  return (\n    <div className=\"photo-selector\">\n      <Form>\n        <Form.Item label=\"Your Kerberos\">\n          <Input\n            placeholder=\"kerb\"\n            rules={[{ required: true }]}\n            onChange={(data) => {\n              props.handleKerbChange(data.target.value);\n            }}\n          />\n        </Form.Item>\n        <Form.Item>\n          <Dragger\n            name=\"file\"\n            accept=\"image/png, image/jpeg\"\n            multiple={true}\n            showUploadList={false}\n            beforeUpload={(file, fileList) => {\n              props.addPhotos(fileList);\n              return false;\n            }}\n          >\n            Drag or click to upload files. Please upload JPEG files.\n          </Dragger>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\n\n// class PhotoSelector extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//     this.fileInput = React.createRef();\n//   }\n\n//   handleImageChange(event) {\n//     this.props.updatePhotoList(event.target.files);\n//   }\n\n//   handleSubmit(event) {\n//     event.preventDefault();\n//     let fileArray = Array.from(this.fileInput.current.files);\n//     let fileString = fileArray.map((file) => file.name).join(\"\\n\");\n//     alert(\n//       `Selected ${fileArray.length} file${\n//         fileArray.length > 1 ? \"s\" : \"\"\n//       }:\\n ${fileString}`\n//     );\n//   }\n\n//   render() {\n//     return (\n//       <input\n//         type=\"file\"\n//         onChange={this.handleImageChange}\n//         ref={this.fileInput}\n//         multiple\n//       />\n//     );\n//   }\n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}