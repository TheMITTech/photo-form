[{"/home/ben/dev/tech-photo-form/client/src/index.js":"1","/home/ben/dev/tech-photo-form/client/src/reportWebVitals.js":"2","/home/ben/dev/tech-photo-form/client/src/App.js":"3","/home/ben/dev/tech-photo-form/client/src/components/index.js":"4","/home/ben/dev/tech-photo-form/client/src/components/ImageWrapper.js":"5","/home/ben/dev/tech-photo-form/client/src/components/DatePicker.tsx":"6","/home/ben/dev/tech-photo-form/client/src/components/TimePicker.tsx":"7","/home/ben/dev/tech-photo-form/client/src/components/Calendar.tsx":"8"},{"size":500,"mtime":1611979736726,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1611620651473,"results":"11","hashOfConfig":"10"},{"size":3721,"mtime":1612333495493,"results":"12","hashOfConfig":"10"},{"size":263,"mtime":1612253826423,"results":"13","hashOfConfig":"10"},{"size":4040,"mtime":1612332540590,"results":"14","hashOfConfig":"10"},{"size":405,"mtime":1612253683593,"results":"15","hashOfConfig":"10"},{"size":634,"mtime":1612253711223,"results":"16","hashOfConfig":"10"},{"size":391,"mtime":1612253741513,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1l9csx6",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"/home/ben/dev/tech-photo-form/client/src/index.js",[],["38","39"],"/home/ben/dev/tech-photo-form/client/src/reportWebVitals.js",[],"/home/ben/dev/tech-photo-form/client/src/App.js",["40","41","42","43","44","45"],"import logo from \"./logo.svg\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  Typography,\n  Upload,\n  message,\n  Form,\n  Input,\n  Button,\n  Select,\n  Divider,\n} from \"antd\";\nimport \"./App.scss\";\n\nimport { ImageWrapper } from \"./components\";\n\nconst { Title, Paragraph, Text, Link } = Typography;\nconst { Dragger } = Upload;\n\nfunction App() {\n  return (\n    <div className=\"main-container\">\n      <PhotoForm />\n    </div>\n  );\n}\n\nfunction PhotoForm() {\n  // start our list of photos empty - this is a FileList\n  const [photoList, setPhotoList] = useState([]); // we'll update as new photos are added\n\n  function handlePhotoSubmit() {\n    console.log(\"submitted photo list to follow\");\n    console.log(photoList);\n    alert(`submitting ${JSON.stringify(photoList)}`);\n  }\n\n  let imageForms = photoList.map((photoInfo, index) => (\n    <ImageWrapper\n      file={photoInfo.file}\n      key={index}\n      itemNum={index + 1}\n      handleUpdate={(formData) => {\n        console.log(\n          `Saw update to form in item ${index + 1}: ${JSON.stringify(formData)}`\n        );\n        let newPhotosList = [...photoList];\n        newPhotosList[index].info = formData;\n      }}\n    />\n  ));\n\n  return (\n    <div className=\"photo-form\">\n      <Typography>\n        <Title>The Tech Photo Upload Form</Title>\n        <Paragraph>\n          This site is meant to make the process of uploading photos simpler.\n        </Paragraph>\n        <Paragraph>\n          The current file list is {JSON.stringify(photoList)}\n        </Paragraph>\n      </Typography>\n      <PhotoSelector\n        addPhotos={(photosToAdd) => {\n          // add an object with info and the file object for each photo\n          let photoInfoList = photosToAdd.map((file) => ({\n            file: file,\n            info: {},\n          }));\n          setPhotoList(photoList.concat(photoInfoList));\n        }}\n      />\n\n      {/* show image forms for each image */}\n      {imageForms}\n      <Divider />\n      {/* maybe it would be better to have one button for each one?\n          then we don't have to parse this grossness */}\n      <Button type=\"primary\" onClick={handlePhotoSubmit}>\n        Submit Photos\n      </Button>\n    </div>\n  );\n}\n\nfunction PhotoSelector(props) {\n  return (\n    <div className=\"photo-selector\">\n      <Form>\n        <Form.Item label=\"Your Kerberos\">\n          <Input placeholder=\"kerb\" />\n        </Form.Item>\n        <Form.Item>\n          <Dragger\n            name=\"file\"\n            accept=\"image/png, image/jpeg\"\n            multiple={true}\n            showUploadList={false}\n            beforeUpload={(file, fileList) => {\n              props.addPhotos(fileList);\n              return false;\n            }}\n          >\n            Drag or click to upload files. Please upload JPEG files.\n          </Dragger>\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\n\n// class PhotoSelector extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.handleSubmit = this.handleSubmit.bind(this);\n//     this.fileInput = React.createRef();\n//   }\n\n//   handleImageChange(event) {\n//     this.props.updatePhotoList(event.target.files);\n//   }\n\n//   handleSubmit(event) {\n//     event.preventDefault();\n//     let fileArray = Array.from(this.fileInput.current.files);\n//     let fileString = fileArray.map((file) => file.name).join(\"\\n\");\n//     alert(\n//       `Selected ${fileArray.length} file${\n//         fileArray.length > 1 ? \"s\" : \"\"\n//       }:\\n ${fileString}`\n//     );\n//   }\n\n//   render() {\n//     return (\n//       <input\n//         type=\"file\"\n//         onChange={this.handleImageChange}\n//         ref={this.fileInput}\n//         multiple\n//       />\n//     );\n//   }\n// }\n\nexport default App;\n","/home/ben/dev/tech-photo-form/client/src/components/index.js",[],"/home/ben/dev/tech-photo-form/client/src/components/ImageWrapper.js",["46","47","48","49","50","51","52","53","54"],"import React, { useEffect, useState } from \"react\";\nimport EXIF from \"exif-js\"; // for reading image data\nimport * as dayjs from \"dayjs\";\nimport {\n  Typography,\n  Upload,\n  message,\n  Form,\n  Input,\n  Button,\n  Select,\n  Divider,\n} from \"antd\";\nimport { DatePicker } from \"../components\";\nconst { Title, Paragraph, Text, Link } = Typography;\nconst { Option } = Select;\n\n/* ImagePreviewer\n * One of these will be created for each image the user uploads.\n * It will allow the user to set attributes for the image\n *\n * props:\n * itemNum: the number assigned to this image (1,2,3, etc)\n * file: a js File object, the file that we're dealing with now\n * handleUpdate(formData): the function to handle updates to the form data\n * NOT YET: updateRemaining(formData): the function to update the remaining items with entered data\n */\nfunction ImageForm(props) {\n  const [imgForm] = Form.useForm();\n  var imgDate = dayjs(props.imgInfo[\"date\"]);\n  console.log(imgDate);\n  console.log(dayjs(\"2019-11-10T03:53:31-05:00\"));\n  return (\n    <div className=\"image-info-form-container\">\n      <Divider />\n      <Title level={2}>\n        Image {props.itemNum}: {props.file.name}\n      </Title>\n      <img src={URL.createObjectURL(props.file)} className=\"image-preview\" />\n      <Form\n        form={imgForm}\n        onFieldsChange={(changedFields, allFields) =>\n          props.handleUpdate(allFields)\n        }\n      >\n        <Form.Item label=\"Event/Topic\" name=\"event\">\n          <Input placeholder=\"Men's Soccer vs. WPI\" />\n        </Form.Item>\n        <Form.Item label=\"Department\" name=\"department\">\n          <Select placeholder=\"Select\">\n            <Option value=\"spo\">SPO</Option>\n            <Option value=\"fto\">FTO</Option>\n            <Option value=\"rtz\">RTZ</Option>\n            <Option value=\"cl\">CL</Option>\n          </Select>\n        </Form.Item>\n        <Form.Item\n          label=\"Date/Time Taken (from EXIF if available)\"\n          name=\"datetime\"\n        >\n          <DatePicker\n            defaultValue={imgDate.isValid() ? imgDate : undefined}\n            key={imgDate} // necessary to ensure DatePicker re-renders when date found\n            showTime={true}\n            disabled={imgDate.isValid()}\n          />\n        </Form.Item>\n        <Form.Item label=\"Caption\" name=\"caption\">\n          <Input.TextArea placeholder=\"See the wiki for how to write a good caption\" />\n        </Form.Item>\n        <Form.Item label=\"Attribution (if not yourself)\" name=\"attribution\">\n          <Input placeholder=\"Photo Provided by Dance Troupe\" />\n        </Form.Item>\n        {/* <Button\n          type=\"link\"\n          htmlType=\"button\"\n          onClick={() =>\n            alert(\n              `filling others! ${JSON.stringify(imgForm.getFieldsValue(true))}`\n            )\n          }\n        >\n          copy inputs to remaining images\n        </Button> */}\n      </Form>\n    </div>\n  );\n}\n\n/* ImageWrapper\n * Parses the exif data of the image and renders the ImageForm\n */\nexport default function ImageWrapper(props) {\n  const [imgExifData, setExifData] = useState({});\n  const [imgDate, setImgDate] = useState(null);\n\n  function parseEXIFDate(exifDate) {\n    // parses a date in EXIF string format and returns a Date\n    var b = exifDate.split(/\\D/); // split date string on any non-digit char (regex)\n    var d = new Date(b[0], b[1] - 1, b[2], b[3], b[4], b[5]);\n    return d;\n  }\n\n  useEffect(() => {\n    EXIF.getData(props.file, function () {\n      var exifDate = EXIF.getTag(this, \"DateTimeOriginal\");\n\n      if (exifDate !== undefined) setImgDate(parseEXIFDate(exifDate));\n      else setImgDate(null);\n\n      // var exifData = EXIF.getAllTags(this);\n      // if (exifData) {\n      //   setExifData(exifData);\n      //   console.log(`Image Date: ${EXIF.getTag(this, \"DateTimeOriginal\")}`);\n      // } else {\n      //   console.log(\"No EXIF data found in image '\" + props.file.name + \"'.\");\n      // }\n    });\n  }, [props.file]);\n\n  return (\n    <ImageForm\n      {...props}\n      imgInfo={{\n        date: imgDate,\n      }}\n    />\n  );\n}\n","/home/ben/dev/tech-photo-form/client/src/components/DatePicker.tsx",[],"/home/ben/dev/tech-photo-form/client/src/components/TimePicker.tsx",[],["55","56"],"/home/ben/dev/tech-photo-form/client/src/components/Calendar.tsx",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":1,"column":8,"nodeType":"63","messageId":"64","endLine":1,"endColumn":12},{"ruleId":"61","severity":1,"message":"65","line":2,"column":17,"nodeType":"63","messageId":"64","endLine":2,"endColumn":26},{"ruleId":"61","severity":1,"message":"66","line":6,"column":3,"nodeType":"63","messageId":"64","endLine":6,"endColumn":10},{"ruleId":"61","severity":1,"message":"67","line":10,"column":3,"nodeType":"63","messageId":"64","endLine":10,"endColumn":9},{"ruleId":"61","severity":1,"message":"68","line":17,"column":27,"nodeType":"63","messageId":"64","endLine":17,"endColumn":31},{"ruleId":"61","severity":1,"message":"69","line":17,"column":33,"nodeType":"63","messageId":"64","endLine":17,"endColumn":37},{"ruleId":"61","severity":1,"message":"70","line":6,"column":3,"nodeType":"63","messageId":"64","endLine":6,"endColumn":9},{"ruleId":"61","severity":1,"message":"66","line":7,"column":3,"nodeType":"63","messageId":"64","endLine":7,"endColumn":10},{"ruleId":"61","severity":1,"message":"71","line":10,"column":3,"nodeType":"63","messageId":"64","endLine":10,"endColumn":9},{"ruleId":"61","severity":1,"message":"72","line":15,"column":16,"nodeType":"63","messageId":"64","endLine":15,"endColumn":25},{"ruleId":"61","severity":1,"message":"68","line":15,"column":27,"nodeType":"63","messageId":"64","endLine":15,"endColumn":31},{"ruleId":"61","severity":1,"message":"69","line":15,"column":33,"nodeType":"63","messageId":"64","endLine":15,"endColumn":37},{"ruleId":"73","severity":1,"message":"74","line":39,"column":7,"nodeType":"75","endLine":39,"endColumn":78},{"ruleId":"61","severity":1,"message":"76","line":94,"column":10,"nodeType":"63","messageId":"64","endLine":94,"endColumn":21},{"ruleId":"61","severity":1,"message":"77","line":94,"column":23,"nodeType":"63","messageId":"64","endLine":94,"endColumn":34},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'message' is defined but never used.","'Select' is defined but never used.","'Text' is assigned a value but never used.","'Link' is assigned a value but never used.","'Upload' is defined but never used.","'Button' is defined but never used.","'Paragraph' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'imgExifData' is assigned a value but never used.","'setExifData' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]